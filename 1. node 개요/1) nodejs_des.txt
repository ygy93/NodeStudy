1. Node.js 란?
  1) ~ 1995년 이전 : HTML + CSS --> 웹사이트 개발
     ~ 1995년 이후 : HTML + CSS + JavaScript --> 웹사이트 개발

  2) JavaScript
    - Netscape 사에서 개발한 live script > Mocha > JavaScript 12월 발표

  3) 브라우저에서 지원하는 자바스크립트 엔진
    - 사파리 (Safari) : JavaScript Core
    - InternetExplorer (MS) : chakra
    - Firefox : Spider Monkey
    - Chrome : V8 엔진 (JIT Just-In-Time comilation)
    - Edge (MS) : Chakara --> 2021년도에 V8 엔진을 탑재함

  4) 2009년 Ryan Dahl (라이언 달) Node.js 발표
    - Deno : TypeScript 런타임 최초 개발자
      -- JavaScript everywhere --

  5) Node.js 는  Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임 환경입니다.
    - JavaScript code outside a web browser

  6) Browser vs Node.js
    - Browser => 동적인 웹 애플리케이션 구현 가능
                  -------------------------------
                  Web API - Windows, Document, Ajax, JSON,...
      
    - Node.js => 서버와 서버간의 랜더링, 백엔드 서버 구현
                프론트 엔드 개발 등..
                ------------------------------------------
                Node API

2. Node.js 를 어떻게 공부할 것인가?
  1) Node 구조를 정확히 이해하고 실행 방식을 기억한다.

  2) Node 에서 제공하는 API 를 잘 사용할 줄 알아야 한다.
    - API 는 자바스크립트 문법으로 작성되었으므로, 문법을 정확히 익히도록 한다.

  3) 개발을 편리하게 지원해주는 프레임워크에 대해서 익힌다.
    - Node.js --> Express, Rust
    - Web API (브라우저) --> React, Vue, ..

3. Node.js 특징 4가지
  1) JavaScript Runtime
    - V8 엔진 탑재 --> EcmaScript6 (ES6), Open API (Open Source), Node API...

  2) Single Thread
    - Process (Multi Thread) VS Thread

  3) Non-Blocking (비동기적) IO (Input / Output)

  4) Event - Driven

4. 실행 환경 만들기
  1) Node.JS 설치 : https://nodejs.org/ko

  2) 터미널 툴 설치
    - 윈도우용 터미널 : https://cmder.app/
    - 맥용 터미널 : https://iterm2.com/
  
  3) 개발 툴 설치 : VSCode 등..
  
  4) Git 설치 및 GitHub 연동

5. REPL ( 읽고, 처리하고, 출력하고, 반복한다 ) - 터미널 환경에서 실행
  R : Read
  E : Eval
  P : Print
  L : Loop

6. console 로그에 대한 API 검색 및 활용 - [../code/2.console.js]

7. this 정리 (global, object) - [../code/3.this.js]

8. export / require - node, Blocking
    export / import - JavaScript, Non-Blocking

    [npm init --yes] - package.json 생성 터미널 명령어 ( 안에 타입 모듈을 넣어주면 export, import 편히 사용 )

9. Node API
  1) os - 운영 체제 정보
  2) Process
  3) Path
  4) FileSystem
  5) Stream & Buffer
    - 웹에 있는 데이터들을 잘게 쪼개서 조각씩 작게 보내는 것이 Stream ex) 넷플릭스, 디즈니플러스

10. NPM (Node Package Manager)
  - npmjs.com
  - 노드에서 외부 라이브러리 사용과 프로젝트 관리를 위함 ( 레파지토리 )
  - 오픈 소스로 제공되며, 천백만명의 개발자들이 사용하는 큰 커뮤니티로 백만개 이상의 라이브러리 존재
  - NPX 는 다룬로드하여 저장하지 않고, 바로 실행
  - yarn 는 페이스북에서 라이브러리 커뮤니티로 npm 에서 제기되는 문제점을 해결하고자 만듦
    React 에서 주로 사용되며 NPM 과 호환이 됨

11. HTTP / HTTPS
  1) HTTP / HTTPS
    - <HTTP> Hypertext Transfer Protocol (request - response protocol)

              request(URL:http://www.naver.com/index.do) - dns (domain server)
      client -------------------> server
            <--------------------
                response(HTML)
                      |
          데이터를 가로채는 경우 발생
    

    - <HTTPS> Hypertext Transfer Protocol Secure

              request(URL:https://www.naver.com/index.do) - dns (domain server)
      client -------------------> server
            <--------------------
                response(HTML) : SSL, TSL 등 공개키를 사용한 암호화되어 전송
                      |
          데이터를 가로채는 경우 감소

  2) Status Codes
    - 서버가 클라이언트가 요청한 처리상태를 숫자 (3자리 숫자, 5개 범위) 로 전송하는 코드

      100 ~ : Informational
        100 (Continue) - 요청이 정상적이며, 계속 진행 가능
        102 (Processing) - 요청한 것을 아직 처리 중

      200 ~ : Successful
        200 (OK) - 성공 메시지
        201 (Created) - 클라이언트가 요청한 리소스 생성이 성공함
        204 (No Content) - 클라이언트 요청 처리 완료 전송할 콘텐츠는 없음

      300 ~ : Redirection
        301 (Mpved Permanently) - 요청한 페이지가 영구적으로 다른 곳으로 이동
        302 (Found) - 요청한 페이지가 임시적으로 다른 곳으로 이동
        303 (See Other) - 302 와 동일한 의미, 단 GET 방식만 사용 가능

      400 ~ : Client error
        400 (Bad Request) - 요청한 쿼리가 잘못된 경우
          ex) https://www.naver.com/index.menu?id=book ? 부터 뒤에 내용을 쿼리 스트링
          쿼리 스트링 : URL의 한 부분이며 요청하고자 하는 URL에 부가적인 정보를 포함하고 싶을 때 사용한다.
        401 (Unauthorized) - 로그인 등 권한이 없는 클라이언트가 요청한 경우
        403 (Forbidden) - 로그인한 사용자이지만 특정한 일을 수행할 권한이 없음
        404 (Not Found) - 이 존재하지 않을 때
        405 (Method Not Allowed) - 요청한 기능이 허용되지 않을 때

      500 ~ : Server error
        500 (Internal Server Error) - 서버에서 요청을 처리할 수 없는 경우 전송
        502 (Bad Gateway) - 중간에 서버 요청을 어떻게 처리해야 할지 모르는 경우 전송
        503 (Service Unavailable) - URL 에서 요청한 특정한 처리를 하기 위한 준비가 아직 안 되었을 때

  3) Request
    - URL : Uniform Resource Location
    https://www.naver.com:80/course/font/css/search?a=2
    ------  ---------------  ---------------------- ---
    protocol  hostname            pathname          query(-string) : get 방식에서만 사용

    - Method : 요청하는 방식 (GET / POST / PUT...)
    https://developer.mozilla.org/ko/docs/Web/HTTP/methods

      GET - get [200, 401, 403, 404, 405...]
        : 서버에서 해당 리소스를 '가져오고 싶을 때' (URL 에 붙어서 넘어감)

      POST - created [201, 401, 403, 404, 409...]
        : URL 이 가리키는 곳에 무언가를 '생성하고 싶을 때', 전송하는 데이터의 용량이 큰 경우 (body 에 붙어서 넘어감)

      PUT  - replace [200, 204, 305, 404, 405...]
        : URL 에 있는 데이터를 '업데이트 하고 싶을 때'

      DELETE - delete [200, 204, 305, 404, 405...]
        : URL 에 있는 데이터를 '삭제하고 싶을 때'

      PATCH - replace partially [200, 204, 305, 404, 405...]
        : '부분적'으로 업데이트 하고 싶을 때

      HEAD - get without body [200, 401, 403, 404, 405...]
        : 데이터를 받지는 않고 'HEAD 만 받고 싶을 때'

      OPTIONS - all supported methods for URL [200, 401, 403, 404, 405...]
        : 해당 URL 에서 사용 가능한 모든 메소드 옵션을 알고 싶을 때

      TRACE - echoes the received request [200, 401, 403, 404, 405...]
        : 요청에 대한 서버의 반응 상태를 확인할 때

    * GET/HEAD/OPTIONS/TRACE 메소드는 서버의 데이터를 읽기만 진행하고,
      POST/PUT/DELETE/PATCH 데이터의 변경을 요청하는 메소드

  4) HTTP Headers
    - Stateless Protocol : HTTP 는 상태정보를 저장하지 않는 프로토콜이므로 서버에 대한 인증을 필요시 얻어야함
    - Cookies & Session
            request(get):http://www.naver.com/login
      client -------------------> server
            <-------------------
                response : 로그인화면(HTML)

              request (post) : 로그인요청 (id, pass)
            ---------------------------------------> Server + DB
            <----------------------------- 로그인 성공 : Session (key0)
            URL + Session(key0) ------------------->
  cookies(session (key0))
  |--------> 브라우저

12. Node 서버 생성하기
  1) 간단한 심플한 서버 생성
      템플릿 엔진을 구현한 서버 생성

  2) http 모듈을 이용하여 서버 생성
    http2 / https 모듈을 배포시 사용

13. Express
  1) 웹, 모바일 서비스를 지원하는 node.js 의 서버 라이브러리
     내부적으로 프레임워크 형식이 지원

  2) Express 서버 생성
    - Express 설치 : npm i express (뒤에 -g 를 하면 PC 전역에서 사용할 수 있음)

    const express = require('express'); // const express import 'express';
    const app = express();
    ~~ 작성하는 로직 ~~
    app.listen(포트번호);

  3) request (요청)
    express_서버.요청메소드('패스', 콜백함수);

    Ex) 
      // 해당 페이지를 요청, status 200
      app.get('/', (req, res, next) => {});

      // post 방식은 body 를 통해 데이터 전달, JSON 객체로 생성
      app.use(express.json());
      app.post('/join', (req, res, next) => {
        const { a, b, c } = req.body;
      });

      // put 방식은 데이터 replace, 업데이트
      app.put('/:id', (req, res, next) => {
        const id = req.params.id;
      });

      // delete 방식은 데이터 delete
      app.delete('/:id', (req, res, next) => {
        const id = req.params.id;
      });

  4) response (응답)
    res.send(전송할 내용);
    res.sendFile(전송할 내용을 담고있는 파일의 주소를 호출);
    res.sendStatus(status 코드, 전송할 내용);
    res.status(status 코드);

    Ex) / 요청이 오면, Hello 문자를 전송
      app.get('/', (req, res, next) => {
        res.send('Hello');
      }); // 전체의 단위 : 미들웨어

      app.get('/', (req, response, next) => {
        response.send('Hello');
      });
  
  5) 미들웨어 (Middleware)
    - 미들웨어는 작성된 순서에 따라 호출된다.
      클라이언트의 요청 주소를 찾기 위해 순서대로 검색하며 실행

    - 미들웨어는 개별적으로 작성할 수도 있고, 체이닝으로 연결하여 작성도 가능
    
    - 미들웨어의 가장 마지막에는 에러를 처리하는 로직을 작성 (use, all 사용)

    * use 와 all
      - 미들웨어 전체적으로 실행되는 메소드를 정의할 때 사용
      - use : /path 주소는 하위 모든 주소를 포함하는 개념
      Ex) app.use('/sky', callback);

      - all : /path/* path 경로 다음에 * 기호를 추가하여 하위 모든 주소를 포함하는 개념으로 사용 가능
      Ex) app.all('/sky/*', callback);

      * 미들웨어의 콜백함수는 여러개 정의가 가능
      app.use('/', 
              (req, res, next) => {
                console.log('first'); // 첫번째의 콜백함수의 콘솔만 찍힘
                next(); // next 를 사용함으로써 다음 콜백함수로 찍히게 할 수 있음
              }, 
              (req, res, next) => {
                console.log('second');
              });

      * 미들웨어의 콜백함수에서 분기문 사용 시 주의점
      app.get('/', (req, res, next) => {
        console.log('first');

        if (true){
          res.sendStatus(200);
        }
        res.send('hi');
      });